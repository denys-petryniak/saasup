@use 'sass:math';

/// Converts PX to REM
/// @access public
/// @param {string} $size - Value to be converted in PX.
/// @returns {string} - Returns converted value with the specified unit.
/// @example font-size: toRem(24px);
/// @returns font-size: 1.5rem;
@function toRem($size) {
  @if (type-of($size) != 'number') or (unit($size) != 'px') {
    @warn "Unsupported unit: #{unit($size)}. Please specify a value in 'px'.";
    @return null;
  }

  $browser-context: 16px;
  @return math.div($size, $browser-context) * 1rem;
}

/// Converts PX to EM
/// @access public
/// @param {string} $size - Value to be converted in PX.
/// @returns {string} - Returns converted value with the specified unit.
/// @example font-size: toEm(24px);
/// @returns font-size: 1.5em;
@function toEm($size) {
  @if (type-of($size) != 'number') or (unit($size) != 'px') {
    @warn "Unsupported unit: #{unit($size)}. Please specify a value in 'px'.";
    @return null;
  }

  $browser-context: 16px;
  @return math.div($size, $browser-context) * 1em;
}

/// Rounds a number to the specified number of decimal places.
/// @param {number} $number - The number to be rounded.
/// @param {number} $decimals - The number of decimal places to round to (default: 0).
/// @return {number} - The rounded number.
@function decimalRound($number, $decimals: 0) {
  $n: 1;

  @if $decimals > 0 {
    @for $i from 1 through $decimals {
      $n: $n * 10;
    }
  }

  @return math.div(math.round($number * $n), $n);
}

/// Clamps a value between a minimum and maximum size based on a breakpoint range.
/// @access public
/// @param {string|number} $min-size - Minimum size value in rem units.
/// @param {string|number} $max-size - Maximum size value in rem units.
/// @param {string|number} $min-breakpoint - Minimum breakpoint value in rem units. (Default: $default-min-bp)
/// @param {string|number} $max-breakpoint - Maximum breakpoint value in rem units. (Default: $default-max-bp)
/// @param {string} $unit - Target unit for the output size. (Default: vw)
/// @throws {Error} - Throws an error if any of the input values have an invalid unit.
/// @returns {string} - Returns the clamped value with the specified unit.

$default-min-bp: toRem(320px);
$default-max-bp: toRem(1440px);

@function clamped(
  $min-size,
  $max-size,
  $min-breakpoint: $default-min-bp,
  $max-breakpoint: $default-max-bp,
  $unit: vw
) {
  $inputs: ($min-size, $max-size, $min-breakpoint, $max-breakpoint);

  @each $input in $inputs {
    @if unit($input) != 'rem' {
      @error "Invalid unit! Please make sure all inputs use 'rem' as the unit.";
    }
  }

  $slope: math.div($max-size - $min-size, $max-breakpoint - $min-breakpoint);
  $slope-to-unit: decimalRound(
    $number: $slope * 100,
    $decimals: 3,
  );
  $intercept: decimalRound(
    $number: $min-size - $slope * $min-breakpoint,
    $decimals: 3,
  );

  @return clamp(
    #{$min-size},
    #{$slope-to-unit}#{$unit} + #{$intercept},
    #{$max-size}
  );
}

// Define the stacking order from highest (top) to lowest (bottom)
$layer-stack: (modal, header);

/// Retrieves the z-index value associated with the specified layer.
///
/// @param {string} $layer - The name of the layer.
/// @returns {number} - The z-index value for the layer, or null if the layer is not found.
/// @throws {Warning} - Prints a warning if the given layer is not found in the list of layers.
@function stacking($layer) {
  $layer-index: index($layer-stack, $layer);

  @if $layer-index {
    // Calculate the z-index based on the layer's position in the stack
    @return length($layer-stack) - $layer-index + 1;
  } @else {
    // Warn if the layer is not found and return null
    @warn 'Invalid layer: "#{$layer}". Valid layers are: #{$layer-stack}.';
    @return null;
  }
}
